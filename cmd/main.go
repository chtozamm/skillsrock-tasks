package main

import (
	"context"
	"log"
	"os"
	"time"

	"github.com/chtozamm/skillsrock-tasks/internal/database"
	"github.com/gofiber/fiber/v2"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/joho/godotenv"
)

type application struct {
	queries *database.Queries
}

func main() {
	// Load environment variables
	log.Println("Setting up environment variables...")
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Failed to load environment variables: %v", err)
	}

	dbURL := os.Getenv("DB_URL")
	if dbURL == "" {
		log.Fatal("Missing DB_URL environment variable")
	}

	port := os.Getenv("PORT")
	if port == "" {
		log.Fatal("Missing PORT environment variable")
	}

	// Create database connection pool
	log.Println("Creating database connection pool...")
	conn, err := pgxpool.New(context.Background(), dbURL)
	if err != nil {
		log.Fatalf("Unable to create database connection pool: %v", err)
	}
	defer conn.Close()

	// Check the database connection
	log.Println("Trying to reach the database...")
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
	defer cancel()
	err = conn.Ping(ctx)
	if err != nil {
		log.Fatalf("Unable to reach the database: %v", err)
	}

	// Wrap the DB connection in queries generated by sqlc
	dbQueries := database.New(conn)

	// Application configuration
	app := &application{
		queries: dbQueries,
	}

	// Set up the router
	srv := fiber.New()
	srv.Post("/tasks", app.handleCreateTasks)
	srv.Get("/tasks", app.handleGetTasks)
	srv.Put("/tasks/:id", app.handleUpdateTasks)
	srv.Delete("/tasks/:id", app.handleDeleteTasks)

	// Start the server
	log.Printf("Server is listening on port :%s\n", port)
	log.Fatal(srv.Listen(":8080"))
}
